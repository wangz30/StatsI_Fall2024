standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*(1-sum((class_bribery[i,])/sum(class_bribery))*sum((class_bribery[,j])/sum(class_bribery))))
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum((class_bribery[i,])/sum(class_bribery))*
sum((class_bribery[,j])/sum(class_bribery))))
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum((class_bribery[,i])/sum(class_bribery))*
sum((class_bribery[j,])/sum(class_bribery))))
}
}
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum((class_bribery[i,])/sum(class_bribery))*
(1-sum((class_bribery[,j])/sum(class_bribery)))))
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum((class_bribery[i])/sum(class_bribery))*
(1-sum((class_bribery[j])/sum(class_bribery)))))
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-rowSums(class_bribery)[i])/sum(class_bribery))*
(1-colSums(class_bribery)[j])/sum(class_bribery))
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-rowSums(class_bribery)[i])/sum(class_bribery))*
(1-colSums(class_bribery)[j])/sum(class_bribery)
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-(rowSums(class_bribery))[i])/sum(class_bribery))*
(1-(colSums(class_bribery))[j])/sum(class_bribery)
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-(rowSums(class_bribery))[i]))/sum(class_bribery)*
(1-(colSums(class_bribery))[j])/sum(class_bribery)
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-(rowSums(class_bribery))[i]))/sum(class_bribery)*
(1-(colSums(class_bribery))[j])/sum(class_bribery)
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-(rowSums(class_bribery))[i]))/sum(class_bribery)*
(1-(colSums(class_bribery))[j])/sum(class_bribery)
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-(rowSums(class_bribery))[i]))/sum(class_bribery)*
(1-(colSums(class_bribery))[j])/sum(class_bribery)
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-(rowSums(class_bribery))[i]))/sum(class_bribery)*
(1-(colSums(class_bribery))[j])/sum(class_bribery)
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-(rowSums(class_bribery))[i]))/sum(class_bribery)*
(1-(colSums(class_bribery))[j])/sum(class_bribery)
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum((class_bribery[i,])/sum(class_bribery))*
(1-sum((class_bribery[,j])/sum(class_bribery)))))
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
class_bribery[1,]
sum((class_bribery[i,]
sum((class_bribery[1,]
sum(class_bribery[1,])
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum(class_bribery[i,])/sum(class_bribery))*
(1-sum(class_bribery[,j])/sum(class_bribery))))
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum(class_bribery[i,])/sum(class_bribery))*
(1-sum(class_bribery[,j])/sum(class_bribery)))
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
# 创建一个包含标准化残差的数据框
standardized_residuals <- data.frame(
Class = c("Upper class", "Lower class"),
Not_Stopped = c(0.322, -0.322),
Bribe_Requested = c(-1.642, 1.642),
Stopped_Warning = c(1.523, -1.523)
)
# 打印表格
print(standardized_residuals)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
# create matrix to conduct chi-square test
trafficViolations <- matrix(c(14, 6, 7, 7, 7, 1), byrow=T, nrow=2)
rownames(trafficViolations) <- c("Upper class", "Lower class")
colnames(trafficViolations) <- c("Not stopped", "Bribe", "Stopped/warned")
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
observedValues <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(observedValues)
sumRow <- rowSums(observedValues)
sumCol <- colSums(observedValues)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
v <- function(r, c, n) c * r * (n - r) * (n - c)/n^3
V <- outer(sumRow, sumCol, v, grandSum)
dimnames(expectedValues) <- dimnames(observedValues)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
test_statistic <- sum((abs(table - expectedValues))^2 / expectedValues)
df <- (nrow(observedValues) - 1L) * (ncol(observedValues) - 1L)
p_value <- pchisq(test_statistic, df, lower.tail = FALSE)
adjusted_residuals <- (observedValues - expectedValues)/sqrt(expectedValues * (1-sumRow/grandSum) * (1-sumCol/grandSum))
standardized_residuals <- (observedValues - expectedValues)/sqrt(V)
# return values
return(list(statistic = test_statistic,
df = df,
p.value = p_value,
observed = observedValues,
expected = expectedValues,
adj_res = adjusted_residuals,
std_res = standardized_residuals))
}
byHandChiSquare(table=trafficViolations)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
######1.1######
# create data
class_bribery <- matrix(c(14,6,7,7,7,1), nrow = 2, ncol = 3, byrow = TRUE)
# rename
rownames(class_bribery) <- c("Upper class", "Lower class")
colnames(class_bribery) <- c("Not Stopped", "Bribe requested", " Stopped/given warning")
# sum
sum_class_bribery <- cbind(class_bribery, row_sum = rowSums(class_bribery))
sum_class_bribery <- rbind(sum_class_bribery,col_sum = colSums(sum_class_bribery))
# calculate frequency
expected_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
expected_values[i,j] <- (sum_class_bribery[i, "row_sum"]*sum_class_bribery[-(1:2),j])/sum(class_bribery)
}
}
# chi-squared statistic
chi_statistic <- sum((class_bribery-expected_values)^2/expected_values)
print(chi_statistic)
# df
df <- (nrow(class_bribery)-1) * (ncol(class_bribery)-1)
print(df)
# test
chisq.test(class_bribery)
######1.2######
pvalue <- pchisq(chi_statistic, df, lower.tail=FALSE)
print(pvalue)
print("Since the p-value (0.15) > 0.10, we don't have sufficient evidence to reject the null hypothesis at the α = 0.10 significance level. This suggests that there is no significant difference in the likelihood of police officers soliciting a bribe from drivers based on their class.")
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum(class_bribery[i,])/sum(class_bribery))*
(1-sum(class_bribery[,j])/sum(class_bribery)))
}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
# test
chisq.test(class_bribery)$stdres
# list
print(standard_residuals_values)
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum(class_bribery[i,])/sum(class_bribery))*
(1-sum(class_bribery[,j])/sum(class_bribery)))}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
print(standard_residuals_values)
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
View(expenditure)
expenditure <- read.table("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv", header=T)
expenditure <- read.CSV("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv", header=T)
expenditure <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv", header=T)
View(expenditure)
regression_model <- lm(water ~ reserved, data=women)
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv", header=T)
regression_model <- lm(water ~ reserved, data=women)
summary(regression_model)
data_problem2 <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv", header=T)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
######1.1######
# create data
class_bribery <- matrix(c(14,6,7,7,7,1), nrow = 2, ncol = 3, byrow = TRUE)
# rename
rownames(class_bribery) <- c("Upper class", "Lower class")
colnames(class_bribery) <- c("Not Stopped", "Bribe requested", " Stopped/given warning")
# sum
sum_class_bribery <- cbind(class_bribery, row_sum = rowSums(class_bribery))
sum_class_bribery <- rbind(sum_class_bribery,col_sum = colSums(sum_class_bribery))
# calculate frequency
expected_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
expected_values[i,j] <- (sum_class_bribery[i, "row_sum"]*sum_class_bribery[-(1:2),j])/sum(class_bribery)
}
}
# chi-squared statistic
chi_statistic <- sum((class_bribery-expected_values)^2/expected_values)
print(chi_statistic)
# df
df <- (nrow(class_bribery)-1) * (ncol(class_bribery)-1)
print(df)
# test
chisq.test(class_bribery)
######1.2######
pvalue <- pchisq(chi_statistic, df, lower.tail=FALSE)
print(pvalue)
print("Since the p-value (0.15) > 0.10, we don't have sufficient evidence to reject the null hypothesis at the α = 0.10 significance level. This suggests that there is no significant difference in the likelihood of police officers soliciting a bribe from drivers based on their class.")
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum(class_bribery[i,])/sum(class_bribery))*
(1-sum(class_bribery[,j])/sum(class_bribery)))}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
# test
chisq.test(class_bribery)$stdres
# list
print(standard_residuals_values)
#####################
# Problem 2
#####################
data_problem2 <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv", header=T)
######2.1######
print("Ho = Having a Reservation policy requiring a female head of GP is not correlated with the number of new
or repaired drinking water facilities")
print("Ha = Having a Reservation policy requiring a female head of GP is correlated with the number of new or
repaired drinking water facilities")
######2.2######
regression_model <- lm(water ~ reserved, data = data_problem2)
summary(regression_model)
######2.3######
print("Since the p-value (≈0.02) < 0.05, we have sufficient evidence to reject the null hypothesis at the α = 0.05 significance level.
This suggests that Having reserved seats for female politicians increase the number drinking water facilities in the villages.")
print("Since the p-value (≈0.02) < 0.05, we have sufficient evidence to reject the null hypothesis at the α = 0.05 significance level.
This suggests that Having reserved seats for female politicians increase the number drinking water facilities in the villages.")
######1.1######
# create data
class_bribery <- matrix(c(14,6,7,7,7,1), nrow = 2, ncol = 3, byrow = TRUE)
# rename
rownames(class_bribery) <- c("Upper class", "Lower class")
colnames(class_bribery) <- c("Not Stopped", "Bribe requested", " Stopped/given warning")
# sum
sum_class_bribery <- cbind(class_bribery, row_sum = rowSums(class_bribery))
sum_class_bribery <- rbind(sum_class_bribery,col_sum = colSums(sum_class_bribery))
# calculate frequency
expected_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
expected_values[i,j] <- (sum_class_bribery[i, "row_sum"]*sum_class_bribery[-(1:2),j])/sum(class_bribery)
}
}
# chi-squared statistic
chi_statistic <- sum((class_bribery-expected_values)^2/expected_values)
print(chi_statistic)
# df
df <- (nrow(class_bribery)-1) * (ncol(class_bribery)-1)
print(df)
# test
chisq.test(class_bribery)
######1.2######
pvalue <- pchisq(chi_statistic, df, lower.tail=FALSE)
print(pvalue)
print("Since the p-value (0.15) > 0.10, we don't have sufficient evidence to reject the null hypothesis at the α = 0.10 significance level. This suggests that there is no significant difference in the likelihood of police officers soliciting a bribe from drivers based on their class.")
######1.1######
# create data
class_bribery <- matrix(c(14,6,7,7,7,1), nrow = 2, ncol = 3, byrow = TRUE)
# rename
rownames(class_bribery) <- c("Upper class", "Lower class")
colnames(class_bribery) <- c("Not Stopped", "Bribe requested", " Stopped/given warning")
# sum
sum_class_bribery <- cbind(class_bribery, row_sum = rowSums(class_bribery))
sum_class_bribery <- rbind(sum_class_bribery,col_sum = colSums(sum_class_bribery))
# calculate frequency
expected_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
expected_values[i,j] <- (sum_class_bribery[i, "row_sum"]*sum_class_bribery[-(1:2),j])/sum(class_bribery)
}
}
# chi-squared statistic
chi_statistic <- sum((class_bribery-expected_values)^2/expected_values)
print(chi_statistic)
# df
df <- (nrow(class_bribery)-1) * (ncol(class_bribery)-1)
print(df)
######1.3######
standard_residuals_values <- class_bribery*0
se_values <- class_bribery*0
for (i in 1:2) {
for (j in 1:3) {
se_values[i,j] <- sqrt(expected_values[i,j]*
(1-sum(class_bribery[i,])/sum(class_bribery))*
(1-sum(class_bribery[,j])/sum(class_bribery)))}
}
standard_residuals_values <- (class_bribery-expected_values)/se_values
# test
chisq.test(class_bribery)$stdres
# list
print(standard_residuals_values)
######2. 2######
regression_model <- lm(water ~ reserved, data = data_problem2)
summary(regression_model)
