dir.create(plot_savedir, recursive = TRUE)
}
if (!dir.exists(est_savedir)) {
dir.create(est_savedir, recursive = TRUE)
}
###导入数据
#dj1_data
dat1 <- read_excel(paste0(data_dir, "DJ1.csv"))
dat1 <- dat1[dat1$delay != -1, ]
dat1$Inequality <- ifelse(dat1$numA == 100, 5,
ifelse(dat1$numA == 90, 4,
ifelse(dat1$numA == 80, 3,
ifelse(dat1$numA == 70, 2,
ifelse(dat1$numA == 60, 1, NA)))))
dat1 <- dat1 %>%
mutate(type = ifelse(type == 1, "help", type))
dat1 <- dat1 %>%
mutate(type = ifelse(type == -1, "punish", type))
#dj2_data
dat2 <- read_csv(paste0(data_dir,"DJ2.csv")) %>%
rename(q1 = A_justice, q2 = B_empathy, q3 = C_justice, q4 = question4)
dat2$exp_name[dat2$exp_name == "dj_1a"] <- "A"
dat2$exp_name[dat2$exp_name == "dj_1b"] <- "B"
dat2 <- filter(dat2,type!="control")
#######DJ1
dat1$Inequality <- as.numeric(dat1$Inequality)
lmer(q4 ~ 1 +  Inequality + (1+Inequality|participant), dat1)
# 对每个delay水平下的数据进行lmer分析
models <- dat1 %>%
group_by(delay) %>%
do(model = lmer(q4 ~ 1 + Inequality + (1 + Inequality | participant), data = .))
# 提取模型摘要信息
summaries <- models %>%
transmute(delay = delay,
intercept = fixef(model)[1],
inequality_effect = fixef(model)[2],
intercept_se = summary(model)$coefficients[1,"Std. Error"],
inequality_effect_se = summary(model)$coefficients[2,"Std. Error"],
intercept_t = summary(model)$coefficients[1,"t value"],
inequality_effect_t = summary(model)$coefficients[2,"t value"],
intercept_p = summary(model)$coefficients[1,"Pr(>|t|)"],
inequality_effect_p = summary(model)$coefficients[2,"Pr(>|t|)"])
# 查看结果
print(summaries)
View(summaries)
# 查看结果
print(summaries)
# 创建一个新列，表示intercept_p值所在的区间
summaries <- summaries %>%
mutate(sig = pmax(p.adjust(intercept_p, method = "BH"), 0.001))
# 查看结果
print(summaries)
############dj2
dat2$Inequality <- as.numeric(dat1$Inequality)
############dj2
dat2$Inequality <- as.numeric(dat2$Inequality)
lmer(q4 ~ 1 +  Inequality + (1+Inequality|participant), dat2)
# 对每个delay水平下的数据进行lmer分析
models <- dat2 %>%
group_by(delay) %>%
do(model = lmer(q4 ~ 1 + Inequality + (1 + Inequality | participant), data = .))
# 提取模型摘要信息
summaries <- models %>%
transmute(delay = delay,
intercept = fixef(model)[1],
inequality_effect = fixef(model)[2],
intercept_se = summary(model)$coefficients[1,"Std. Error"],
inequality_effect_se = summary(model)$coefficients[2,"Std. Error"],
intercept_t = summary(model)$coefficients[1,"t value"],
inequality_effect_t = summary(model)$coefficients[2,"t value"],
intercept_p = summary(model)$coefficients[1,"Pr(>|t|)"],
inequality_effect_p = summary(model)$coefficients[2,"Pr(>|t|)"])
# 创建一个新列，表示intercept_p值所在的区间
summaries <- summaries %>%
mutate(sig = pmax(p.adjust(intercept_p, method = "BH"), 0.001))
# 查看结果
print(summaries)
View(summaries)
View(dat1)
library(rjson)
install.packages("rjson")
install.packages("rjson")
library(rjson)
chi_df <- read.csv("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/containment_health_index_avg.csv")
str(chi_df) #overall structure
dim(chi_df) #dimensions
View(chi_df)
dublin <- fromJSON(file = "https://prodapi.metweb.ie/monthly-data/Dublin%20Airport")
str(dublin)
View(dublin)
dublin_df <- as.data.frame(dublin$total_rainfall)
View(dublin_df)
str(dublin_df)
View(dublin_df)
colnames(dublin_df)
str(dublin_df)
View(dublin_df)
cork <- fromJSON(file = "https://prodapi.metweb.ie/monthly-data/Roches%20point")
cork_df <- as.data.frame(cork$total_rainfall)
View(cork_df)
dim(dublin_df) == dim(cork_df)
donegal <- fromJSON (file = "https://prodapi.metweb.ie/monthly-data/Malin%20Head")
donegal_df <- as.data.frame(donegal$total_rainfall)
View(donegal_df)
View(diet_data)
View(donegal_df)
rain_df <- do.call("rbind", list(dublin = dublin_df,
cork = cork_df,
donegal = donegal_df))
str(rain_df)
View(rain_df)
rain_df <- rain_df[,!endsWith(colnames(rain_df),"annual")]
rain_df <- data.frame(lapply(rain_df, function(x) as.numeric(x)))
rain_df <- rain_df[,colSums(is.na(rain_df))<nrow(rain_df)]
dublin <- fromJSON(file = "https://prodapi.metweb.ie/monthly-data/Dublin%20Airport")
str(dublin) # the result is usually into a list
# and then we need to take list into data.frame
dublin_df <- as.data.frame(dublin$total_rainfall)
str(dublin_df)
View(dublin_df)
colnames(dublin_df)
cork <- fromJSON(file = "https://prodapi.metweb.ie/monthly-data/Roches%20point")
cork_df <- as.data.frame(cork$total_rainfall)
# Comparing if the dataframes have the same dimensions
dim() # usually output the number of rows and columns
View(rain_df)
dublin <- fromJSON(file = "https://prodapi.metweb.ie/monthly-data/Dublin%20Airport")
str(dublin) # the result is usually into a list
# and then we need to take list into data.frame
dublin_df <- as.data.frame(dublin$total_rainfall)
str(dublin_df)
View(dublin_df)
colnames(dublin_df)
cork <- fromJSON(file = "https://prodapi.metweb.ie/monthly-data/Roches%20point")
cork_df <- as.data.frame(cork$total_rainfall)
# Comparing if the dataframes have the same dimensions
dim() # usually output the number of rows and columns
dublin <- fromJSON(file = "https://prodapi.metweb.ie/monthly-data/Dublin%20Airport")
str(dublin) # the result is usually into a list
# and then we need to take list into data.frame
dublin_df <- as.data.frame(dublin$total_rainfall)
str(dublin_df)
View(dublin_df)
colnames(dublin_df)
cork <- fromJSON(file = "https://prodapi.metweb.ie/monthly-data/Roches%20point")
cork_df <- as.data.frame(cork$total_rainfall)
# Comparing if the dataframes have the same dimensions
# dim() # usually output the number of rows and columns
# if so, will print true
dim(dublin_df) == dim(cork_df)
donegal <- fromJSON (file = "https://prodapi.metweb.ie/monthly-data/Malin%20Head")
donegal_df <- as.data.frame(donegal$total_rainfall)
# merge these three rows in the same dataframe
# do.call - a function dynamically with a list of arguments
# first argument is the function u want to call["rbind"]
# second argument  is a list of arguments that will be passed to that function
rain_df <- do.call("rbind", list(dublin = dublin_df,
cork = cork_df,
donegal = donegal_df))
str(rain_df)
# Drop columns that contain annual averages
# removes any columns whose names end with the string "annual"
rain_df <- rain_df[,!endsWith(colnames(rain_df),"annual")]
# Drop columns that contain report.LTA.
# same logic as above
rain_df <- rain_df[,!startsWith(colnames(rain_df),"report.LTA.")]
# Transforming in numeric
# lapply() applies a specified function to each element of a list or vector and returns *a list*
# lapply( data, function(x) specified function )
# E.G. lapply(demodata, function(x) x^2)
rain_df <- data.frame(lapply(rain_df, function(x) as.numeric(x)))
View(rain_df)
# Before the comma (the empty space): No specific rows are being filtered, meaning all rows are selected.
rain_df <- rain_df[,colSums(is.na(rain_df))<nrow(rain_df)]
#New column with county names
rownames(rain_df)<- c("Dublin", "Cork", "Donegal")
#transposing so we have the dates on the rows and counties on columns
rain_df <- data.frame(t(rain_df[-1]))
# Specify par parameters
par(mar = c(5, 4, 4, 8),
xpd = TRUE)
# R Markdown
# R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
install.packages("IRkernel")
IRkernel::installspec()
options(jupyter.rich_display
= FALSE)
dev.cur()
dev.list()
dev.set(2)
dev.set(dev.new())
dev.cur()
plot(expenditure$Y, expenditure$X1,
col=1)
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
plot(expenditure$Y, expenditure$X1,
col=1)
pdf("plot_example.pdf")
plot(expenditure$Y, expenditure$X1,
col=1)
# Scatter plot
plot(df$income, df$edu)
# Applied Statistical Analysis I
# Tutorial 2: Hypothesis testing, experiments, difference in means
# Get working directory
getwd()
# Set working directory
setwd("D:/大学/AAAA_TCD的文件/AAAA_上课/ASA_QM_1/tutorial/week2")
getwd()
# Agenda
# (a.) Descriptive analysis
# (b.) Confidence intervals
# (c.) Significance test for a mean
# (d.) Significance test for a difference in means
### Research Question -----------
# Is there a relationship between education and income?
# Load data
df <- read.csv("fictional_data.csv")
# Selection of variables
# Education: University level education in years
# Income: Monthly net income
# Capital: Whether the person lives in capital or not
### (a.) Descriptive analysis ----------
# First step, look at data
View(df)
head(df)
str(df) # Structure of R object
?str
mean(df$income) # Central tendency, mean
var(df$income) # Variability, variance
sd(df$income) # Variability, standard deviation
sd(df$income)/sqrt(length(df$income)) # Variability, standard **error**
# Step by step
df$income # Access variable
length(df$income) # Number of observations
sqrt(length(df$income)) # Take square root
sqrt(19)
# Get summary statistics for entire dataset
summary(df)
# Some quick visualizations, to look at distribution
hist(df$income,
#breaks = 20,
main="Monthly net income",
xlab="Euro")
plot(density(df$incom),
main="Monthly net income",
xlab="Euro")
# Which kind of inferences can we make with regards to the population,
# based on the sample data?
mean(df$income) # Sample mean is estimate for population mean
sd(df$income)/sqrt(length(df$income))
# Standard **error** (Sample standard deviation adjusted by sample size)
# is estimate for standard deviation of the sampling distribution
# Why do we need standard error? --> to calculate measures of
# uncertainty for our point estimate (e.g., confidence intervals, and p-values)
# (b.) Confidence intervals --------
# Definition: Point estimate +/- Margin of error,
# where margin of error is a multiple of the standard error
# What do we need?
mean(df$income) # Point estimate
sd(df$income)/sqrt(length(df$income)) # Standard error
# How to find the multiple?
# Looking at the normal distribution, we see that
# 95% of observations lie within +/-1.96 (approximately 2)
# standard errors of point estimate
# The **approximate** solution
# Lower bound, 95 confidence level
lower_95 = mean(df$income) - (1.96*sd(df$income)/sqrt(length(df$income)))
# Upper bound, 95 confidence level
upper_95 = mean(df$income) + (1.96*sd(df$income)/sqrt(length(df$income)))
# Print
lower_95
mean(df$income)
upper_95
# The **precise** solution, using normal distribution
# Lower bound, 95 confidence level
lower_95_n <- qnorm(0.025,
mean = mean(df$incom),
sd = (sd(df$income)/sqrt(length(df$income))))
# Upper bound, 95 confidence level
upper_95_n <- qnorm(0.975,
mean = mean(df$income),
sd = (sd(df$incom)/sqrt(length(df$income))))
# Step by step
?qnorm
qnorm(0.025) # value for first 2.5%
qnorm(0.975) # value last 2.5%
qnorm(0.025, mean = 2, sd = 0.4) # Change mean and standard error
# Print
lower_95_n
mean(df$income)
upper_95_n
# How to calculate 99% confidence intervals?
# When to use normal distribution and when to use t distribution?
# The **precise** solution, using t distribution
t_score <- qt(0.995, df=length(df$income)-1)
lower_99_t <- mean(df$income)-(t_score)*(sd(df$income)/sqrt(length(df$income)))
upper_99_t <- mean(df$income)+(t_score)*(sd(df$income)/sqrt(length(df$income)))
# Step by step
?qt
# This gives the critical value for the t-statistics of the 0.5th quantile in the
## lower tail of the t-distribution with length(df$income)-1) degree of freedom.
qt(0.005, df = length(df$income)-1) # critical value for first 0.5%
qt(0.995, df = length(df$income)-1) # last 0.5%
qt(0.005, df = length(df$income)-1, lower.tail = FALSE) # last 0.5%
# Print
lower_99_t
mean(df$income)
upper_99_t
# Update Histogram
hist(df$income)
abline(v=mean(df$income), col="black")
abline(v=lower_95, col="black", lty="dashed")
abline(v=upper_95, col="black", lty="dashed")
# Is there a relationship between education and income?
# Scatter plot
plot(df$income, df$edu)
plot(df$income, df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
plot(df$income, df$edu,
col=1)
plot(df$income, df$edu,
col=2)
plot(df$income, df$edu,
col=3)
# Improve visualization and save
png(file="output/scatter_plot.png")
plot(df$edu,
df$income,
col=df$cap+1,
ylab="Monthly net income (in Euro)",
xlab="University level education (in years)",
main="The Relationship between Education and Income")
# Add legend
legend(0,3000, # x and y position of legend
legend=c("Capital", "Non capital"),
col=c("red", "black"),
pch=1,        # Marker type (1 is default)
cex = 0.5)
dev.off()
# Boxplot
boxplot(df$income ~ df$cap,
main="Boxplot of Income by place of residence",
ylab="Euro",
xlab="Place of residence",
names=c("Non capital", "Capital"))
# (c.) Significance test for a mean ------
# What is the average monthly income in Ireland
# According to a quick Google search, it is 3034
# How does our sample compare to the population,
# being the working population in Ireland?
t.test(df$income, mu = 3034)
?t.test
t.test(df$income, mu = 3034, alternative = "less")
# We also found a much easier way to calculate the confidence intervals (!)
t.test(df$income, conf.level = 0.99, alternative = "two.sided")
# Let's double check
lower_99_t
mean(df$income)
upper_99_t
# (d.) Significance test for a difference in means ------
# On average, do people earn differently in the capital
# compared to people who do not reside in the capital?
# Calculate means for subgroups
mean(df[df$cap==0, ]$income)
mean(df[df$cap==1, ]$income)
# Step by step
df$cap
df$cap==0 # Only consider cases with cap==0
df[df$cap==0, ] # Subsetting rows accordingly
df[df$cap==0, ]$income # Access variable
mean(df[df$cap==0, ]$income) # Calculate mean
# t-test
t.test(df$income ~ df$cap, alternative = "two.sided")
?t.test
# On average, do people earn more in the capital
# compared to people who do not reside in the capital?
# t-test
t.test(df$income ~ df$cap, alternative = "less")
t.test(df$income ~ df$cap, alternative = "greater")
# Scatter plot
plot(df$income, df$edu)
plot(df$income, df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
plot(df$income, df$edu,
col=1)
plot(df$income, df$edu,
col=2)
plot(df$income, df$edu,
col=3)
# Improve visualization and save
png(file="output/scatter_plot.png")
plot(df$edu,
df$income,
col=df$cap+1,
ylab="Monthly net income (in Euro)",
xlab="University level education (in years)",
main="The Relationship between Education and Income")
# Add legend
legend(0,3000, # x and y position of legend
legend=c("Capital", "Non capital"),
col=c("red", "black"),
pch=1,        # Marker type (1 is default)
cex = 0.5)
dev.off()
## Plot Y~X1
pdf("plot_example.pdf")
plot(expenditure$Y, expenditure$X1,
col=1)
## Plot Y~X3
plot(expenditure$Y, expenditure$X2,
col=2)
## Plot Y~X3
plot(expenditure$Y, expenditure$X3,
col=3)
dev.off()
View(expenditure)
View(df)
View(df)
plot(expenditure$X1,
expenditure$X2,
expenditure$X3，
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
plot(expenditure$X1,
expenditure$X2,
expenditure$X3，
## Plot Y~X1
pdf(file="output/Y~X1.pdf")
plot(expenditure$Y, expenditure$X1)
## Plot Y~X2
pdf(file="output/Y~X2.pdf")
plot(expenditure$Y, expenditure$X2)
## Plot Y~X3
pdf(file="output/Y~X3.pdf")
plot(expenditure$Y, expenditure$X3)
## Plot Y~X1
pdf(file="output/Y~X1.pdf")
plot(expenditure$Y, expenditure$X1)
## Plot Y~X2
pdf(file="output/Y~X2.pdf")
plot(expenditure$Y, expenditure$X2)
## Plot Y~X3
pdf(file="output/Y~X3.pdf")
plot(expenditure$Y, expenditure$X3)
dev.off()
setwd("D:/大学/AAAA_TCD的文件/AAAA_上课/StatsI_Fall2024/problemSets/PS01/My_Answers/")
## Plot Y~X1
pdf(file="output/Y~X1.pdf")
plot(expenditure$Y, expenditure$X1)
## Plot Y~X2
pdf(file="output/Y~X2.pdf")
plot(expenditure$Y, expenditure$X2)
## Plot Y~X3
pdf(file="output/Y~X3.pdf")
plot(expenditure$Y, expenditure$X3)
dev.off()
### 2.1 ###
setwd("D:/大学/AAAA_TCD的文件/AAAA_上课/StatsI_Fall2024/problemSets/PS01/My_Answers/")
## Plot Y~X1
pdf(file="output/Y~X1.pdf")
plot( expenditure$X1,expenditure$Y)
dev.off()
## Plot Y~X2
pdf(file="output/Y~X2.pdf")
plot(expenditure$X2,expenditure$Y)
dev.off()
## Plot Y~X3
pdf(file="output/Y~X3.pdf")
setwd("D:/大学/AAAA_TCD的文件/AAAA_上课/StatsI_Fall2024/problemSets/PS01/My_Answers/")
## Plot Y~X1
pdf(file="output/Y~X1.pdf")
plot( expenditure$X1,expenditure$Y)
dev.off()
## Plot Y~X2
pdf(file="output/Y~X2.pdf")
plot(expenditure$X2,expenditure$Y)
dev.off()
## Plot Y~X3
pdf(file="output/Y~X3.pdf")
pdf(file="output/Y~X1.pdf")
plot( expenditure$X1,expenditure$Y)
dev.off()
## Plot Y~X2
pdf(file="output/Y~X2.pdf")
plot(expenditure$X2,expenditure$Y)
dev.off()
## Plot Y~X3
pdf(file="output/Y~X3.pdf")
plot(expenditure$X3,expenditure$Y)
dev.off()
pdf(file="output/Y~X2.pdf")
plot(expenditure$X2,expenditure$Y)
dev.off()
pdf(file="output/Y~X1.pdf")
plot( expenditure$X1,expenditure$Y)
dev.off()
plot( expenditure$X1,expenditure$Y)
plot(expenditure$X2,expenditure$Y)
plot(expenditure$X3,expenditure$Y)
png(file="output/Y~X1.png")
plot( expenditure$X1,expenditure$Y)
dev.off()
## Plot Y~X2
png(file="output/Y~X2.png")
plot(expenditure$X2,expenditure$Y)
dev.off()
## Plot Y~X3
png(file="output/Y~X3.png")
plot(expenditure$X3,expenditure$Y)
dev.off()
plot(expenditure$X3,expenditure$Y)
